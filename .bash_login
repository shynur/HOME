#! /bin/bash

export FUNCNEST=1000  # 防止出现无穷递归.
PS1=$'\n'exited\($'\e[01;31m'\$?$'\e[0m'\)$'\n'$'\e[01;32m'\\u$'\e[0m'@$'\e[01;32m'\\H$'\e[0m':$'\e[01;34m'\\w/$'\e[0m'\ \\#'`(((\#%10==1))&&echo st)||(((\#%10==2))&&echo nd)||(((\#%10==3))&&echo rd)||echo th`'\ [\\d\ \\@]'$((`git rev-parse --is-inside-work-tree 2>/dev/null`||`git rev-parse --is-inside-git-dir 2>/dev/null`)&&echo -e "" \e[38\;2\;241\;78\;50mGit\e[0m:`[ -z $(git branch --show-current) ]&&git describe --all||git branch --show-current`)'$'\n'\\\$' '
export PS3='You select (number): '  # select 语句的提示符.

alias bc='bc --warn'
alias bzip2='bzip2 --verbose --best'
alias cal='cal --monday'
alias chcon='chcon --verbose'
alias clang-format='clang-format --Werror -fallback-style=none --ferror-limit=0'
alias cp='cp --interactive --recursive'
alias cpio='cpio -c --make-directories --io-size=4096 --verbose'  # -c 使用新型的可移植存储形式.
alias df='df -hT'
alias dmesg='dmesg --human --color'
alias du='du -ah --max-depth=1'
alias free='free --human --total'
alias fuser='fuser --user --verbose'
alias grep='grep --extended-regexp --color=always --line-number --with-filename --recursive'
alias gzip='gzip --verbose --best'
alias info='emacs -Q -f info-standalone'
alias jobs='jobs -l'
alias ls='ls -1 --almost-all --author --color=auto --classify --format=verbose --human-readable --size --sort=extension --time-style=long-iso'
alias lsblk='lsblk -p; echo; lsblk -f'
alias nl='nl --body-numbering=a --number-format=rn'
alias partprobe='partprobe -s'
alias pidof='pidof -x'
alias restorecon='restorecon -v'
alias rm='rm --preserve-root --recursive --verbose'
alias sestatus='sestatus -v'
alias sudo='sudo '
alias tar='tar --verbose'
alias tree='tree -ahFC'
alias type='type -a'  # -a 在 PATH 中查找时, 列出所有匹配项.
alias uname='uname --all'
alias wc='wc --lines --words --chars'
alias wget='wget --verbose'
alias xargs='xargs --no-run-if-empty --verbose'
alias xz='xz -9 --extreme --verbose'  # -9 压缩效果最好; --extreme 压缩效果格外地好.

alias g++-14='g++-14 -std=c++26'
alias g++-13='g++-13 -std=c++23'
alias g++-12='g++-12 -std=c++23'
alias g++-11='g++-11 -std=c++23'
alias g++-10='g++-10 -std=c++2a'
alias clang++-19='clang++-19 -std=c++26'
alias clang++-18='clang++-18 -std=c++26'
alias clang++-17='clang++-17 --gcc-install-dir=/usr/lib/gcc/x86_64-linux-gnu/13 -std=c++26'
alias clang++-16='clang++-16 --gcc-install-dir=/usr/lib/gcc/x86_64-linux-gnu/12 -std=c++2b'

alias ros2='which -s ros2 || {
                echo -n "首次调用 ros2 命令, 正在执行初始化"
                . /opt/ros/rolling/setup.bash                                && sleep 0.3 && echo -n  .   &&
                . /usr/share/colcon_cd/function/colcon_cd.sh                 && sleep 0.3 && echo -n  .   &&
                export _colcon_cd_root=/opt/ros/rolling                      && sleep 0.3 && echo -n ". " &&
                . /usr/share/colcon_argcomplete/hook/colcon-argcomplete.bash && sleep 0.3 && {
                    echo "ROS 2 的相关环境已经成功初始化~"
                    echo; sleep 0.3
                    echo "一些常用命令:"
                    echo "  ~/workspace\$'$'\e[01;32m rosdep install \e[0m''-i --from-path src --rosdistro rolling -y  # 安装依赖包"
                    echo "  ~/workspace\$'$'\e[01;32m colcon build \e[0m''--symlink-install\`#无需编译 Python 文件\` --packages-up-to \"按需构建指定的包\""
                    echo "  ~/workspace\$ ros2\`#这是个 alias\` &>/dev/null; . install/local_setup.bash  # 创建 underlay+overlay"
                    echo "  ~/workspace/src\$'$'\e[01;32m ros2 pkg create \e[0m''--build-type ament_python --dependencies rclcpp --node-name node1\`#以自动创建一个 hello-world 样板\` --license GPL-3.0-only my_pkg_1"
                    echo "  ~/workspace/src\$'$'\e[01;32m ros2 pkg create \e[0m''--build-type ament_cmake  --dependencies rclcpp --node-name node2                                --license GPL-3.0-only my_pkg_2"
                    echo; sleep 0.3
                    echo "注意: 不要在 shell where workspace is built 中 source built overlay!"
                    echo; sleep 0.3
                    echo "两种最小 package 构成:"
                    echo "  ~/workspace/src/"
                    echo "              ├── my_pkg_1/"
                    echo "              │   ├── package.xml        元信息"
                    echo "              │   ├── resource/my_pkg_1  marker"
                    echo "              │   ├── setup.cfg          当包提供 executable 文件时, 提示 \`ros2 run\` 来此查找"
                    echo "              │   ├── setup.py           INSTALL"
                    echo "              │   └── my_pkg_1/          存放所有 custom nodes"
                    echo "              │       ├── __init__.py"
                    echo "              │       └── node1.py"
                    echo "              └── my_pkg_2/"
                    echo "                  ├── package.xml"
                    echo "                  ├── CMakeLists.txt"
                    echo "                  ├── include/my_pkg_2/"
                    echo "                  └── src/  存放所有 custom nodes"
                    echo "                      └── node2.cpp"
                    echo; sleep 0.3
                }
            }; ros2'
alias rosdep='ros2 &>/dev/null; rosdep'
alias colcon='ros2 &>/dev/null; colcon'

shopt -s dotglob   # Filename Expansion 时, 包含隐藏文件.
shopt -s failglob  # Filename Expansion 时, 若匹配失败则报错.
shopt -s globasciiranges  # Filename Expansion 时, `[…]` 使用 ASCII 的排列顺序.
shopt -u globskipdots     # Filename Expansion 时, 不考虑 `.` 和 `..`.
shopt -s globstar         # Filename Expansion 时, `**` 会在当前目录及其子目录下搜索.
shopt -s interactive_comments  # 允许在 interactive shell 中使用注释.
shopt -u nocaseglob            # 进行 Filename Expansion 时, 区分大小写.
shopt -u nocasematch           # case 语句匹配模式时, 区分大小写.
shopt -u noexpand_translation  # $"..." 生成 $"..." 而不是 $'...', i.e., 保留原始语义.
set -o noclobber  # 使用 `>` 重定向时, 防止意外覆盖 existent 文件.  (用 `>|` 强制覆盖.)

export HISTSIZE=10000
set -o history
shopt -s histappend  # 将历史命令追加到 $HISTFILE 而不是覆盖.
export HISTTIMEFORMAT=
export HISTFILESIZE=        # ~/.bash_history 可以无限增长.
export PROMPT_COMMAND='history -a'

set -o emacs  # 使用 Emacs 的键位.
setleds -v -D +num  # '-v': 显示修改后的状态.  '-D': 同时修改 键盘的 LED 灯 和 实际状态.
unset IFS  # 开启 Word Splitting, 且让 Bash 为 IFS 使用默认值.

if [ -f ~/.emacs.d/etc/use-emacs.bash ]; then
    . ~/.emacs.d/etc/use-emacs.bash
fi

# 开启 core dump, 限制大小为 NNN 块 (通常 512B/块).
# ulimit -c NNN


# Local Variables:
# mode: bash
# coding: utf-8-unix
# End:
